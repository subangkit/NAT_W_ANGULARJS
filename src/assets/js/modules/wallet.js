require('./services')

var Web3 = require('web3')
var provider = new Web3.providers.HttpProvider(rpcBC);
var contract = require("truffle-contract");

var ICOContract = contract({
    "contract_name": "NatCoinCrowdsale",
    "abi": [
        {
            "constant": false,
            "inputs": [],
            "name": "getCoreSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "reserveSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "endBlock",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "coreSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "claimReveralTokens",
            "outputs": [],
            "payable": true,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "rate",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "usedReveralSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "claimCoreTokens",
            "outputs": [],
            "payable": true,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "weiRaised",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "claimPaymentTokens",
            "outputs": [],
            "payable": true,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "startBlock",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "icoSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "wallet",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "usedPaymentSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "getPaymentSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "paymentSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "getReserveSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "claimReservedTokens",
            "outputs": [],
            "payable": true,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "reveralSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "getIcoSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "getUsedCoreSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "getUsedPaymentSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "getReveralSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "getUsedReserveSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "usedReserveSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "usedCoreSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "beneficiary",
                    "type": "address"
                }
            ],
            "name": "buyTokens",
            "outputs": [],
            "payable": true,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "hasEnded",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "getUsedReveralSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "token",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "usedIcoSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "inputs": [
                {
                    "name": "_startBlock",
                    "type": "uint256"
                },
                {
                    "name": "_endBlock",
                    "type": "uint256"
                },
                {
                    "name": "_rate",
                    "type": "uint256"
                },
                {
                    "name": "_wallet",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "constructor"
        },
        {
            "payable": true,
            "type": "fallback"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "purchaser",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "beneficiary",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "value",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "TokenPurchase",
            "type": "event"
        }
    ],
    "unlinked_binary": "0x6060604052341561000c57fe5b6040516080806123cc83398101604090815281516020830151918301516060909301519092905b5b838383835b438410156100475760006000fd5b838310156100555760006000fd5b600082116100635760006000fd5b600160a060020a03811615156100795760006000fd5b61008e640100000000610b8261013d82021704565b60008054600160a060020a0319908116600160a060020a0393841617909155600186905560028590556004849055600380549091169183169190911790555b505060068054600160a060020a03191633600160a060020a031617905550505b6969e10de76676d080000060075569a968163f0a57b400000060085569e8ef1e96ae389780000060095569de589d32bd931c400000600a55690a968163f0a57b400000600b555b50505050610171565b6000610147610161565b60405190819003906000f080151561015b57fe5b90505b90565b604051610b358061189783390190565b611717806101806000396000f300606060405236156101855763ffffffff60e060020a60003504166303060b68811461019757806303d41eb6146101b9578063083c6323146101db5780630e1e3914146101fd578063197f8a821461021f5780632c4e722e1461023857806333283e591461025a57806334b88e041461027c5780634042b66f14610295578063488bfa0b146102b757806348cd4cb1146102d05780634e8127f6146102f2578063521eb2731461031457806360d1c056146103405780636b19e6921461036257806376aad651146103845780637e2f6e3b146103a65780638d30e65d146103c85780638da5cb5b146103e1578063a0a4cb6c1461040d578063a48d9e701461042f578063b6a5917614610451578063cab0927314610473578063d635fc6314610495578063d6ae5f29146104b7578063db3fd0b8146104d9578063e88f4c6f146104fb578063ec8ac4d81461051d578063ecb70fb714610533578063f03dc3d314610557578063f2fde38b14610579578063fc0c546a14610597578063ff50fcb6146105c3575b6101955b610192336105e5565b5b565b005b341561019f57fe5b6101a7610705565b60408051918252519081900360200190f35b34156101c157fe5b6101a761070c565b60408051918252519081900360200190f35b34156101e357fe5b6101a7610712565b60408051918252519081900360200190f35b341561020557fe5b6101a7610718565b60408051918252519081900360200190f35b610195600160a060020a036004351660243561071e565b005b341561024057fe5b6101a76107cc565b60408051918252519081900360200190f35b341561026257fe5b6101a76107d2565b60408051918252519081900360200190f35b610195600160a060020a03600435166024356107d8565b005b341561029d57fe5b6101a7610886565b60408051918252519081900360200190f35b610195600160a060020a036004351660243561088c565b005b34156102d857fe5b6101a7610938565b60408051918252519081900360200190f35b34156102fa57fe5b6101a761093e565b60408051918252519081900360200190f35b341561031c57fe5b610324610944565b60408051600160a060020a039092168252519081900360200190f35b341561034857fe5b6101a7610953565b60408051918252519081900360200190f35b341561036a57fe5b6101a7610959565b60408051918252519081900360200190f35b341561038c57fe5b6101a7610960565b60408051918252519081900360200190f35b34156103ae57fe5b6101a7610966565b60408051918252519081900360200190f35b610195600160a060020a036004351660243561096d565b005b34156103e957fe5b610324610a19565b60408051600160a060020a039092168252519081900360200190f35b341561041557fe5b6101a7610a28565b60408051918252519081900360200190f35b341561043757fe5b6101a7610a2e565b60408051918252519081900360200190f35b341561045957fe5b6101a7610a35565b60408051918252519081900360200190f35b341561047b57fe5b6101a7610a3c565b60408051918252519081900360200190f35b341561049d57fe5b6101a7610a43565b60408051918252519081900360200190f35b34156104bf57fe5b6101a7610a4a565b60408051918252519081900360200190f35b34156104e157fe5b6101a7610a51565b60408051918252519081900360200190f35b341561050357fe5b6101a7610a57565b60408051918252519081900360200190f35b610195600160a060020a03600435166105e5565b005b341561053b57fe5b610543610a5d565b604080519115158252519081900360200190f35b341561055f57fe5b6101a7610a66565b60408051918252519081900360200190f35b341561058157fe5b610195600160a060020a0360043516610a6d565b005b341561059f57fe5b610324610ab9565b60408051600160a060020a039092168252519081900360200190f35b34156105cb57fe5b6101a7610ac8565b60408051918252519081900360200190f35b600080600160a060020a03831615156105fe5760006000fd5b610606610ace565b15156106125760006000fd5b60045434925061062990839063ffffffff610b0616565b60055490915061063f908363ffffffff610b3516565b60055560008054604080516020908101849052815160e060020a6340c10f19028152600160a060020a03888116600483015260248201879052925192909316936340c10f199360448082019492918390030190829087803b151561069f57fe5b6102c65a03f115156106ad57fe5b505060408051848152602081018490528151600160a060020a0380881694503316927f623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18928290030190a36106ff610b4f565b5b505050565b600a545b90565b60085481565b60025481565b600a5481565b60065433600160a060020a0390811691161461073a5760006000fd5b601054600b540381111561074e5760006000fd5b6011546040805160006020918201819052825160e060020a6340c10f19028152600160a060020a03878116600483015260248201879052935193909416936340c10f19936044808301949391928390030190829087803b15156107ad57fe5b6102c65a03f115156107bb57fe5b5050600b805483019055505b5b5050565b60045481565b60105481565b60065433600160a060020a039081169116146107f45760006000fd5b600f54600a54038111156108085760006000fd5b6011546040805160006020918201819052825160e060020a6340c10f19028152600160a060020a03878116600483015260248201879052935193909416936340c10f19936044808301949391928390030190829087803b151561086757fe5b6102c65a03f1151561087557fe5b5050600a805483019055505b5b5050565b60055481565b60065433600160a060020a039081169116146108a85760006000fd5b600e54600954038111156108bc5760006000fd5b60008054604080516020908101849052815160e060020a6340c10f19028152600160a060020a03878116600483015260248201879052925192909316936340c10f199360448082019492918390030190829087803b151561091957fe5b6102c65a03f1151561092757fe5b50506009805483019055505b5b5050565b60015481565b60075481565b600354600160a060020a031681565b600e5481565b6009545b90565b60095481565b6008545b90565b60065433600160a060020a039081169116146109895760006000fd5b600d546008540381111561099d5760006000fd5b60008054604080516020908101849052815160e060020a6340c10f19028152600160a060020a03878116600483015260248201879052925192909316936340c10f199360448082019492918390030190829087803b15156109fa57fe5b6102c65a03f11515610a0857fe5b50506008805483019055505b5b5050565b600654600160a060020a031681565b600b5481565b6007545b90565b600f545b90565b600e545b90565b600b545b90565b600d545b90565b600d5481565b600f5481565b60025443115b90565b6010545b90565b60065433600160a060020a03908116911614610a895760006000fd5b600160a060020a03811615610ab45760068054600160a060020a031916600160a060020a0383161790555b5b5b50565b600054600160a060020a031681565b600c5481565b60006000600060004392506001548310158015610aed57506002548311155b915050341515818015610afd5750805b93505b50505090565b6000828202831580610b225750828482811515610b1f57fe5b04145b1515610b2a57fe5b8091505b5092915050565b600082820183811015610b2a57fe5b8091505b5092915050565b600354604051600160a060020a03909116903480156108fc02916000818181858888f19350505050151561019257fe5b5b565b6000610b8c610ba6565b60405190819003906000f0801515610ba057fe5b90505b90565b604051610b3580610bb78339019056006003805460a060020a60ff021916905560a0604052600760608190527f4e4154434f494e00000000000000000000000000000000000000000000000000608090815261004e91600491906100bb565b506040805180820190915260038082527f4e544300000000000000000000000000000000000000000000000000000000006020909201918252610093916005916100bb565b5060126006555b60038054600160a060020a03191633600160a060020a03161790555b61015b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fc57805160ff1916838001178555610129565b82800160010185558215610129579182015b8281111561012957825182559160200191906001019061010e565b5b5061013692915061013a565b5090565b61015891905b808211156101365760008155600101610140565b5090565b90565b6109cb8061016a6000396000f300606060405236156100b45763ffffffff60e060020a60003504166305d2035b81146100b657806306fdde03146100da578063095ea7b31461016a57806318160ddd1461019d57806323b872dd146101bf578063313ce567146101f857806340c10f191461021a57806370a082311461024d5780637d64bcb41461027b5780638da5cb5b1461029f57806395d89b41146102cb578063a9059cbb1461035b578063dd62ed3e1461038e578063f2fde38b146103c2575bfe5b34156100be57fe5b6100c66103e0565b604080519115158252519081900360200190f35b34156100e257fe5b6100ea6103f0565b604080516020808252835181830152835191928392908301918501908083838215610130575b80518252602083111561013057601f199092019160209182019101610110565b505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017257fe5b6100c6600160a060020a036004351660243561047e565b604080519115158252519081900360200190f35b34156101a557fe5b6101ad610523565b60408051918252519081900360200190f35b34156101c757fe5b6100c6600160a060020a0360043581169060243516604435610529565b604080519115158252519081900360200190f35b341561020057fe5b6101ad61062c565b60408051918252519081900360200190f35b341561022257fe5b6100c6600160a060020a0360043516602435610632565b604080519115158252519081900360200190f35b341561025557fe5b6101ad600160a060020a0360043516610705565b60408051918252519081900360200190f35b341561028357fe5b6100c6610724565b604080519115158252519081900360200190f35b34156102a757fe5b6102af61078a565b60408051600160a060020a039092168252519081900360200190f35b34156102d357fe5b6100ea610799565b604080516020808252835181830152835191928392908301918501908083838215610130575b80518252602083111561013057601f199092019160209182019101610110565b505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036357fe5b6100c6600160a060020a0360043516602435610827565b604080519115158252519081900360200190f35b341561039657fe5b6101ad600160a060020a03600435811690602435166108d5565b60408051918252519081900360200190f35b34156103ca57fe5b6103de600160a060020a0360043516610902565b005b60035460a060020a900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b505050505081565b60008115806104b05750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156104bc5760006000fd5b600160a060020a03338116600081815260026020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b60005481565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610570908463ffffffff61094e16565b600160a060020a0380861660009081526001602052604080822093909355908716815220546105a5908463ffffffff61096816565b600160a060020a0386166000908152600160205260409020556105ce818463ffffffff61096816565b600160a060020a03808716600081815260026020908152604080832033861684528252918290209490945580518781529051928816939192600080516020610980833981519152929181900390910190a3600191505b509392505050565b60065481565b60035460009033600160a060020a039081169116146106515760006000fd5b60035460a060020a900460ff16156106695760006000fd5b60005461067c908363ffffffff61094e16565b6000908155600160a060020a0384168152600160205260409020546106a7908363ffffffff61094e16565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a25060015b5b5b92915050565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a039081169116146107435760006000fd5b6003805460a060020a60ff02191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a15060015b5b90565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b505050505081565b600160a060020a033316600090815260016020526040812054610850908363ffffffff61096816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610885908363ffffffff61094e16565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193339093169260008051602061098083398151915292918290030190a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461091e5760006000fd5b600160a060020a038116156109495760038054600160a060020a031916600160a060020a0383161790555b5b5b50565b60008282018381101561095d57fe5b8091505b5092915050565b60008282111561097457fe5b508082035b929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f6711c4d368405370c7eafdd9ad61c6558ce8eb39758b5106ff6b208a4fdba8c0029a165627a7a72305820eb12e74b453b5ced86fe14753beec9feabf8e1cbcd9ea87ae02b97ae3eb6694c00296003805460a060020a60ff021916905560a0604052600760608190527f4e4154434f494e00000000000000000000000000000000000000000000000000608090815261004e91600491906100bb565b506040805180820190915260038082527f4e544300000000000000000000000000000000000000000000000000000000006020909201918252610093916005916100bb565b5060126006555b60038054600160a060020a03191633600160a060020a03161790555b61015b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fc57805160ff1916838001178555610129565b82800160010185558215610129579182015b8281111561012957825182559160200191906001019061010e565b5b5061013692915061013a565b5090565b61015891905b808211156101365760008155600101610140565b5090565b90565b6109cb8061016a6000396000f300606060405236156100b45763ffffffff60e060020a60003504166305d2035b81146100b657806306fdde03146100da578063095ea7b31461016a57806318160ddd1461019d57806323b872dd146101bf578063313ce567146101f857806340c10f191461021a57806370a082311461024d5780637d64bcb41461027b5780638da5cb5b1461029f57806395d89b41146102cb578063a9059cbb1461035b578063dd62ed3e1461038e578063f2fde38b146103c2575bfe5b34156100be57fe5b6100c66103e0565b604080519115158252519081900360200190f35b34156100e257fe5b6100ea6103f0565b604080516020808252835181830152835191928392908301918501908083838215610130575b80518252602083111561013057601f199092019160209182019101610110565b505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017257fe5b6100c6600160a060020a036004351660243561047e565b604080519115158252519081900360200190f35b34156101a557fe5b6101ad610523565b60408051918252519081900360200190f35b34156101c757fe5b6100c6600160a060020a0360043581169060243516604435610529565b604080519115158252519081900360200190f35b341561020057fe5b6101ad61062c565b60408051918252519081900360200190f35b341561022257fe5b6100c6600160a060020a0360043516602435610632565b604080519115158252519081900360200190f35b341561025557fe5b6101ad600160a060020a0360043516610705565b60408051918252519081900360200190f35b341561028357fe5b6100c6610724565b604080519115158252519081900360200190f35b34156102a757fe5b6102af61078a565b60408051600160a060020a039092168252519081900360200190f35b34156102d357fe5b6100ea610799565b604080516020808252835181830152835191928392908301918501908083838215610130575b80518252602083111561013057601f199092019160209182019101610110565b505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036357fe5b6100c6600160a060020a0360043516602435610827565b604080519115158252519081900360200190f35b341561039657fe5b6101ad600160a060020a03600435811690602435166108d5565b60408051918252519081900360200190f35b34156103ca57fe5b6103de600160a060020a0360043516610902565b005b60035460a060020a900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b505050505081565b60008115806104b05750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156104bc5760006000fd5b600160a060020a03338116600081815260026020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b60005481565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610570908463ffffffff61094e16565b600160a060020a0380861660009081526001602052604080822093909355908716815220546105a5908463ffffffff61096816565b600160a060020a0386166000908152600160205260409020556105ce818463ffffffff61096816565b600160a060020a03808716600081815260026020908152604080832033861684528252918290209490945580518781529051928816939192600080516020610980833981519152929181900390910190a3600191505b509392505050565b60065481565b60035460009033600160a060020a039081169116146106515760006000fd5b60035460a060020a900460ff16156106695760006000fd5b60005461067c908363ffffffff61094e16565b6000908155600160a060020a0384168152600160205260409020546106a7908363ffffffff61094e16565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a25060015b5b5b92915050565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a039081169116146107435760006000fd5b6003805460a060020a60ff02191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a15060015b5b90565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b505050505081565b600160a060020a033316600090815260016020526040812054610850908363ffffffff61096816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610885908363ffffffff61094e16565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193339093169260008051602061098083398151915292918290030190a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461091e5760006000fd5b600160a060020a038116156109495760038054600160a060020a031916600160a060020a0383161790555b5b5b50565b60008282018381101561095d57fe5b8091505b5092915050565b60008282111561097457fe5b508082035b929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f6711c4d368405370c7eafdd9ad61c6558ce8eb39758b5106ff6b208a4fdba8c0029",
    "networks": {
        "1": {
            "events": {
                "0x623b3804fa71d67900d064613da8f94b9617215ee90799290593e1745087ad18": {
                    "anonymous": false,
                    "inputs": [
                        {
                            "indexed": true,
                            "name": "purchaser",
                            "type": "address"
                        },
                        {
                            "indexed": true,
                            "name": "beneficiary",
                            "type": "address"
                        },
                        {
                            "indexed": false,
                            "name": "value",
                            "type": "uint256"
                        },
                        {
                            "indexed": false,
                            "name": "amount",
                            "type": "uint256"
                        }
                    ],
                    "name": "TokenPurchase",
                    "type": "event"
                }
            },
            "links": {},
            "address": "0xf3ce3010a2a0604095d735a772b55715c84d777d",
            "updated_at": 1502797056299
        }
    },
    "schema_version": "0.0.5",
    "updated_at": 1502797056299
})
var TokenContract = contract({
    "contract_name": "NatCoin",
    "abi": [
        {
            "constant": true,
            "inputs": [],
            "name": "mintingFinished",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "mint",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "balance",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "finishMinting",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "name": "remaining",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "payable": false,
            "type": "function"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "Mint",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [],
            "name": "MintFinished",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        }
    ],
    "unlinked_binary": "0x6003805460a060020a60ff021916905560a0604052600760608190527f4e4154434f494e00000000000000000000000000000000000000000000000000608090815261004e91600491906100bb565b506040805180820190915260038082527f4e544300000000000000000000000000000000000000000000000000000000006020909201918252610093916005916100bb565b5060126006555b60038054600160a060020a03191633600160a060020a03161790555b61015b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100fc57805160ff1916838001178555610129565b82800160010185558215610129579182015b8281111561012957825182559160200191906001019061010e565b5b5061013692915061013a565b5090565b61015891905b808211156101365760008155600101610140565b5090565b90565b6109cb8061016a6000396000f300606060405236156100b45763ffffffff60e060020a60003504166305d2035b81146100b657806306fdde03146100da578063095ea7b31461016a57806318160ddd1461019d57806323b872dd146101bf578063313ce567146101f857806340c10f191461021a57806370a082311461024d5780637d64bcb41461027b5780638da5cb5b1461029f57806395d89b41146102cb578063a9059cbb1461035b578063dd62ed3e1461038e578063f2fde38b146103c2575bfe5b34156100be57fe5b6100c66103e0565b604080519115158252519081900360200190f35b34156100e257fe5b6100ea6103f0565b604080516020808252835181830152835191928392908301918501908083838215610130575b80518252602083111561013057601f199092019160209182019101610110565b505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017257fe5b6100c6600160a060020a036004351660243561047e565b604080519115158252519081900360200190f35b34156101a557fe5b6101ad610523565b60408051918252519081900360200190f35b34156101c757fe5b6100c6600160a060020a0360043581169060243516604435610529565b604080519115158252519081900360200190f35b341561020057fe5b6101ad61062c565b60408051918252519081900360200190f35b341561022257fe5b6100c6600160a060020a0360043516602435610632565b604080519115158252519081900360200190f35b341561025557fe5b6101ad600160a060020a0360043516610705565b60408051918252519081900360200190f35b341561028357fe5b6100c6610724565b604080519115158252519081900360200190f35b34156102a757fe5b6102af61078a565b60408051600160a060020a039092168252519081900360200190f35b34156102d357fe5b6100ea610799565b604080516020808252835181830152835191928392908301918501908083838215610130575b80518252602083111561013057601f199092019160209182019101610110565b505050905090810190601f16801561015c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561036357fe5b6100c6600160a060020a0360043516602435610827565b604080519115158252519081900360200190f35b341561039657fe5b6101ad600160a060020a03600435811690602435166108d5565b60408051918252519081900360200190f35b34156103ca57fe5b6103de600160a060020a0360043516610902565b005b60035460a060020a900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b505050505081565b60008115806104b05750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156104bc5760006000fd5b600160a060020a03338116600081815260026020908152604080832094881680845294825291829020869055815186815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a35060015b92915050565b60005481565b600160a060020a038084166000908152600260209081526040808320338516845282528083205493861683526001909152812054909190610570908463ffffffff61094e16565b600160a060020a0380861660009081526001602052604080822093909355908716815220546105a5908463ffffffff61096816565b600160a060020a0386166000908152600160205260409020556105ce818463ffffffff61096816565b600160a060020a03808716600081815260026020908152604080832033861684528252918290209490945580518781529051928816939192600080516020610980833981519152929181900390910190a3600191505b509392505050565b60065481565b60035460009033600160a060020a039081169116146106515760006000fd5b60035460a060020a900460ff16156106695760006000fd5b60005461067c908363ffffffff61094e16565b6000908155600160a060020a0384168152600160205260409020546106a7908363ffffffff61094e16565b600160a060020a038416600081815260016020908152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a25060015b5b5b92915050565b600160a060020a0381166000908152600160205260409020545b919050565b60035460009033600160a060020a039081169116146107435760006000fd5b6003805460a060020a60ff02191660a060020a1790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a15060015b5b90565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104765780601f1061044b57610100808354040283529160200191610476565b820191906000526020600020905b81548152906001019060200180831161045957829003601f168201915b505050505081565b600160a060020a033316600090815260016020526040812054610850908363ffffffff61096816565b600160a060020a033381166000908152600160205260408082209390935590851681522054610885908363ffffffff61094e16565b600160a060020a0380851660008181526001602090815260409182902094909455805186815290519193339093169260008051602061098083398151915292918290030190a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b60035433600160a060020a0390811691161461091e5760006000fd5b600160a060020a038116156109495760038054600160a060020a031916600160a060020a0383161790555b5b5b50565b60008282018381101561095d57fe5b8091505b5092915050565b60008282111561097457fe5b508082035b929150505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820f6711c4d368405370c7eafdd9ad61c6558ce8eb39758b5106ff6b208a4fdba8c0029",
    "networks": {},
    "schema_version": "0.0.5",
    "updated_at": 1502796925327
})
ICOContract.setProvider(provider);
TokenContract.setProvider(provider);

var deployedICO;
ICOContract.deployed().then(function(instance) {
    var deployedICO = instance;
    console.log(deployedICO)
}).then(function(result) {
    // Do something with the result or continue with more transactions.
});

// Create our angular module
angular.module('dez-wallet', [
    'ngStorage',
    'ngMessages',
    'ui.router',
    'ui.bootstrap',
    'oc.lazyLoad',
    'ajoslin.promise-tracker', 'restangular', //REST Angular
    'satellizer',
    'ngValidate',
    'treeGrid',
    'dez-services'
])

// Router configuration
    .config(['$stateProvider', '$urlRouterProvider', '$authProvider', '$httpProvider',
        function ($stateProvider, $urlRouterProvider, $authProvider, $httpProvider) {
            $httpProvider.defaults.headers.common = {};
            $httpProvider.defaults.headers.post = {};
            $httpProvider.defaults.headers.put = {};
            $httpProvider.defaults.headers.patch = {};
            $httpProvider.defaults.headers.get = {};
            $httpProvider.defaults.useXDomain = true;
            delete $httpProvider.defaults.headers.common['X-Requested-With'];

            $authProvider.responseType = 'token';
            $authProvider.oauth2({
                name: 'fusio',
                url: '/auth/fusio',
                authorizationEndpoint: api_host + '/public/developer/auth',
                redirectUri: host,
                requiredUrlParams: ['scope'],
                scope: ['authorization', 'wallet'],
                scopeDelimiter: ',',
                display: 'popup',
                oauthType: '2.0',
                popupOptions: {width: 500, height: 560},
                responseType: 'token',
                clientId: '5fb0e4bd-eb15-4bd8-b115-504f82856dde'
            });

            $urlRouterProvider.otherwise('/dashboard');
            $stateProvider
                .state('login', {
                    controller: 'LoginCtrl',
                    url: '/login',
                    templateUrl: 'assets/views/layout_login.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/jquery-validation/jquery.validate.min.js',
                                    'assets/js/plugins/jquery-validation/additional-methods.min.js'
                                ]
                            });
                        }],
                    },
                })
                .state('registration', {
                    controller: 'RegistrationCtrl',
                    url: '/registration',
                    templateUrl: 'assets/views/layout_registration.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/jquery-validation/jquery.validate.min.js',
                                    'assets/js/plugins/jquery-validation/additional-methods.min.js',
                                    'assets/js/plugins/sweetalert2/sweetalert2.min.css',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/sweetalert2/es6-promise.auto.min.js',
                                    'assets/js/plugins/sweetalert2/sweetalert2.min.js',
                                    'assets/js/plugins/jquery-vide/jquery.vide.min.js'
                                ]
                            });
                        }],
                        reveralCode: function ($transition$) {
                            return '';
                        },
                        shortName: function ($transition$) {
                            return '';
                        },
                    },
                })
                .state('registrationWithReferal', {
                    controller: 'RegistrationCtrl',
                    url: '/registration/{reveralCode}',
                    templateUrl: 'assets/views/layout_registration.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/jquery-validation/jquery.validate.min.js',
                                    'assets/js/plugins/jquery-validation/additional-methods.min.js',
                                    'assets/js/plugins/sweetalert2/sweetalert2.min.css',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/sweetalert2/es6-promise.auto.min.js',
                                    'assets/js/plugins/sweetalert2/sweetalert2.min.js',
                                    'assets/js/plugins/jquery-vide/jquery.vide.min.js'
                                ]
                            });
                        }],
                        reveralCode: function ($transition$) {
                            return $transition$.params().reveralCode;
                        },
                        shortName: function ($transition$) {
                            return '';
                        },
                    },
                })
                .state('registrationWithShortName', {
                    controller: 'RegistrationCtrl',
                    url: '/ref/{shortName}',
                    templateUrl: 'assets/views/layout_registration.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/jquery-validation/jquery.validate.min.js',
                                    'assets/js/plugins/jquery-validation/additional-methods.min.js',
                                    'assets/js/plugins/sweetalert2/sweetalert2.min.css',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/sweetalert2/es6-promise.auto.min.js',
                                    'assets/js/plugins/sweetalert2/sweetalert2.min.js',
                                    'assets/js/plugins/jquery-vide/jquery.vide.min.js'
                                ]
                            });
                        }],
                        reveralCode: function ($transition$) {
                            return '';
                        },
                        shortName: function ($transition$) {
                            return $transition$.params().shortName
                        }
                    },
                })
                .state('activation', {
                    controller: 'ActivationCtrl',
                    url: '/activation/{activationCode}',
                    templateUrl: 'assets/views/layout_activation.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/jquery-validation/jquery.validate.min.js',
                                    'assets/js/plugins/jquery-validation/additional-methods.min.js',
                                    'assets/js/plugins/sweetalert2/sweetalert2.min.css',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/sweetalert2/es6-promise.auto.min.js',
                                    'assets/js/plugins/sweetalert2/sweetalert2.min.js',
                                    'assets/js/plugins/jquery-vide/jquery.vide.min.js'
                                ]
                            });
                        }],
                        activationCode: function ($transition$) {
                            return $transition$.params().activationCode;
                        }
                    },
                })
                .state('resend', {
                    controller: 'ResendCtrl',
                    url: '/resend',
                    templateUrl: 'assets/views/layout_resend.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/jquery-validation/jquery.validate.min.js',
                                    'assets/js/plugins/jquery-validation/additional-methods.min.js'
                                ]
                            });
                        }],
                    },
                })
                .state('rememberPassword', {
                    controller: 'RememberPasswordCtrl',
                    url: '/remember-password',
                    templateUrl: 'assets/views/layout_remember_password.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/jquery-validation/jquery.validate.min.js',
                                    'assets/js/plugins/jquery-validation/additional-methods.min.js'
                                ]
                            });
                        }],
                    },
                })
                .state('default.dashboard', {
                    url: '/dashboard',
                    templateUrl: 'assets/views/ready_dashboard.html',
                    controller: 'DashboardCtrl',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js'
                                ]
                            });
                        }],
                        tokenContract: function (ContractService) {
                            return ContractService.getTokenContract()
                        },
                    }
                })
                .state('default.main', {
                    controller: 'MainCtrl',
                    templateUrl: 'assets/views/ready_main.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/jquery-validation/jquery.validate.min.js',
                                    'assets/js/plugins/jquery-validation/additional-methods.min.js'
                                ]
                            });
                        }],
                        tokenContract: function (ContractService) {
                            return ContractService.getTokenContract()
                        },
                        crowdsaleContract: function (ContractService) {
                            return ContractService.getCrowdsaleContract()
                        }
                    },
                })
                .state('default.main.wallet', {
                    url: '/wallet',
                    templateUrl: 'assets/views/ready_wallet.html',
                    controller: 'WalletCtrl',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/jquery-validation/jquery.validate.min.js',
                                    'assets/js/plugins/jquery-validation/additional-methods.min.js'
                                ]
                            });
                        }]
                    }
                })
                .state('default.profile', {
                    url: '/profile',
                    controller: 'ProfileCtrl',
                    templateUrl: 'assets/views/ready_profile.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                ]
                            });
                        }],
                    },
                })
                .state('default.referal', {
                    url: '/referal',
                    controller: 'ReferalCtrl',
                    templateUrl: 'assets/views/ready_referal.html',
                    resolve: {
                        deps: ['$ocLazyLoad', function ($ocLazyLoad) {
                            return $ocLazyLoad.load({
                                insertBefore: '#css-bootstrap',
                                serie: true,
                                files: [
                                    'assets/js/plugins/slick/slick.min.css',
                                    'assets/js/plugins/slick/slick-theme.min.css',
                                    'assets/js/plugins/slick/slick.min.js',
                                    'assets/js/plugins/chartjs/Chart.min.js',
                                    'assets/js/plugins/bootstrap-notify/bootstrap-notify.min.js',
                                    'assets/js/plugins/bootstrap-treeview/bootstrap-treeview.min.css',
                                    'assets/js/plugins/bootstrap-treeview/bootstrap-treeview.min.js',
                                ]
                            });
                        }],
                    },
                })
        }
    ])
    /**
     *  COMPONENT
     */
    .component('createWalletComponent', {
        templateUrl: 'assets/views/modal_create_wallet.html',
        bindings: {
            resolve: '<', //INPUT
            close: '&', //OUTPUT
            dismiss: '&'
        },
        controller: function () {
            var $ctrl = this;
            $ctrl.passphrase = '';
            $ctrl.displayName = '';
            $ctrl.$onInit = function () {
                $ctrl.userData = $ctrl.resolve.userData;
                $ctrl.profileData = $ctrl.resolve.profileData;
                $ctrl.displayName = ($ctrl.profileData.firstname !== '') ? $ctrl.profileData.firstname + ' ' + $ctrl.profileData.lastname : $ctrl.userData.name;
            }
            $ctrl.ok = function () {
                $ctrl.close({$value: {passphrase: $ctrl.passphrase}})
            }
            $ctrl.cancel = function () {
                $ctrl.dismiss({$value: {passphrase: ''}})
            }
        }
    })
    .component('createWalletPrivateKeyComponent', {
        templateUrl: 'assets/views/modal_open_wallet.html',
        bindings: {
            resolve: '<', //INPUT
            close: '&', //OUTPUT
            dismiss: '&'
        },
        controller: function () {
            var $ctrl = this;
            $ctrl.privatekey = '';
            $ctrl.displayName = '';
            $ctrl.$onInit = function () {
                $ctrl.userData = $ctrl.resolve.userData;
                $ctrl.profileData = $ctrl.resolve.profileData;
                $ctrl.displayName = ($ctrl.profileData.firstname !== '') ? $ctrl.profileData.firstname + ' ' + $ctrl.profileData.lastname : $ctrl.userData.name;
            }
            $ctrl.ok = function () {
                $ctrl.close({$value: {privatekey: $ctrl.privatekey}})
            }
            $ctrl.cancel = function () {
                $ctrl.dismiss({$value: {privatekey: ''}})
            }
        }
    })
    .component('claimNTCComponent', {
        templateUrl: 'assets/views/modal_claim_NTC.html',
        bindings: {
            resolve: '<', //INPUT
            close: '&', //OUTPUT
            dismiss: '&'
        },
        controller: function ($timeout, ActivityService) {
            var $ctrl = this;
            $ctrl.id = Math.floor((Math.random() * 1000) + 1);
            ;

            $ctrl.displayName = '';
            $ctrl.validationOptions = {
                ignore: [],
                errorClass: 'help-block animated fadeInDown',
                errorElement: 'div',
                errorPlacement: function (error, e) {
                    jQuery(e).parents('.form-group > div').append(error);
                },
                highlight: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error').addClass('has-error');
                    elem.closest('.help-block').remove();
                },
                success: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error');
                    elem.closest('.help-block').remove();
                },
                rules: {
                    'claim-currency': {
                        required: true
                    },
                    'claim-btcaddress': {
                        required: true
                    },
                    'claim-amount': {
                        required: true
                    },
                    'claim-txhash': {
                        required: true
                    },
                },
                messages: {
                    'claim-currency': {
                        required: 'Please select crypto currency you use'
                    },
                    'claim-btcaddress': {
                        required: 'Please insert your address'
                    },
                    'claim-amount': {
                        required: 'Please insert amount of transfered to'
                    },
                    'claim-txhash': {
                        required: 'Please insert transaction hash after successfull transfer from your wallet'
                    },
                }
            }
            $ctrl.$onInit = function () {
                $ctrl.userData = $ctrl.resolve.userData;
                $ctrl.profileData = $ctrl.resolve.profileData;
                $ctrl.displayName = ($ctrl.profileData.firstname !== '') ? $ctrl.profileData.firstname + ' ' + $ctrl.profileData.lastname : $ctrl.userData.name;
                $ctrl.currency = $ctrl.resolve.currency;
                $ctrl.currencyData = $ctrl.resolve.currencyData;
                $ctrl.claim = {
                    currency: $ctrl.currencyData[0],
                    btcaddress: '',
                    amount: '',
                    txhash: '',
                    rate: '',
                    ntc : 0
                };
            }

            $ctrl.changeRate = function (_currency) {
                $ctrl.claim.rate = $ctrl.currencyData[$ctrl.claim.currency.symbol].USD;
                $ctrl.calculateNTC();
            }
            $ctrl.ntc = 0;
            $ctrl.calculateNTC = function () {
                $ctrl.ntc = (($ctrl.claim.amount * $ctrl.claim.rate)/0.8).toFixed(6)
            }
            $ctrl.ok = function () {
                if ($ctrl.claim.btcaddress != '') {
                    if ($ctrl.claim.currency != '') {
                        if ($ctrl.claim.amount > 0) {
                            if ($ctrl.claim.txhash != '') {
                                $ctrl.claim.currency = $ctrl.claim.currency.name;
                                $ctrl.claim.ntc = $ctrl.ntc;
                                $ctrl.close({$value: {claim: $ctrl.claim}})
                            } else {
                                ActivityService.notify(
                                    'warning',
                                    '<strong>Claim</strong> ' + 'Please entry transaction hash code.')
                            }
                        } else {
                            ActivityService.notify(
                                'warning',
                                '<strong>Claim</strong> ' + 'Amount cant set to zero.')
                        }
                    } else {
                        ActivityService.notify(
                            'warning',
                            '<strong>Claim</strong> ' + 'Please select crypto currency.')
                    }
                } else {
                    ActivityService.notify(
                        'warning',
                        '<strong>Claim</strong> ' + 'Please entry your wallet address.')
                }

            }
            $ctrl.cancel = function () {
                $ctrl.dismiss({
                    $value: {
                        claim: {
                            btcaddress: '',
                            amount: ''
                        }
                    }
                })
            }
        }
    })

    /**
     *  CONTROLLER
     */
    .controller('LoginCtrl', function ($scope, $localStorage, $window, Debuger, UserService, $auth, ActivityService,
                                       $timeout, $location, promiseTracker) {
        /*
         * Init Chart.js Chart, for more examples you can check out http://www.chartjs.org/docs
         */
        Debuger.info('Layout : ', 'Login')

        var initValidation = function () {
            jQuery('.js-validation-login').validate({
                ignore: [],
                errorClass: 'help-block animated fadeInDown',
                errorElement: 'div',
                errorPlacement: function (error, e) {
                    jQuery(e).parents('.form-group > div').append(error);
                },
                highlight: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error').addClass('has-error');
                    elem.closest('.help-block').remove();
                },
                success: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error');
                    elem.closest('.help-block').remove();
                },
                rules: {
                    'login-username': {
                        required: true,
                        minlength: 3
                    },
                    'login-password': {
                        required: true,
                        minlength: 5
                    }
                },
                messages: {
                    'login-username': {
                        required: 'Please enter your username',
                        minlength: 'Your username must consist of at least 3 characters'
                    },
                    'login-password': {
                        required: 'Please enter your password',
                        minlength: 'Your password must be at least 5 characters long'
                    }
                }
            });
        };

        initValidation();


        $scope.username = '';
        $scope.password = '';
        $scope.rememberMe = '';

        $scope.loadingTracker = promiseTracker();
        $scope.submitLogin = function (event) {
            jQuery('.js-validation-login').validate('validate')
            var hasErrors = jQuery('.js-validation-login').has('.has-error').length
            if (hasErrors == 0) {
                $scope.loadingTracker.addPromise(
                    UserService.login($scope.username, $scope.password, $scope.rememberMe).then(function (response) {
                        ActivityService.notify('success', 'Successfull login. You will be redirect shortly.')
                        $scope.$emit('checkLogin')
                        $timeout(function () {
                            $location.path('/profile');
                        }, 3000);
                    }, function (response) {
                        ActivityService.notify('warning', '<strong>Authentification</strong> ' + 'Error combination between user and password. Please check your spelling.')
                        Debuger.info('Error Message : ', response)
                    })
                )
            } else {
                ActivityService.notify('warning', '<strong>Validation</strong> There is errors.')
            }
        }
    })
    // Registration Layout Controller
    .controller('RegistrationCtrl', function ($scope, $localStorage, $window, Debuger, UserService, $auth,
                                              ActivityService, $timeout, $location, promiseTracker, reveralCode,
                                              shortName) {
        /*
         * Init Chart.js Chart, for more examples you can check out http://www.chartjs.org/docs
         */
        Debuger.info('Layout : ', 'Registration')
        Debuger.info('Reveral Code : ', reveralCode)

        $scope.register = {
            name: '',
            password: '',
            confirmPassword: '',
            toc: '0',
        }

        var initValidation = function () {
            jQuery('.js-validation-register').validate({
                ignore: [],
                errorClass: 'help-block animated fadeInDown',
                errorElement: 'div',
                errorPlacement: function (error, e) {
                    jQuery(e).parents('.form-group > div').append(error);
                },
                highlight: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error').addClass('has-error');
                    elem.closest('.help-block').remove();
                },
                success: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error');
                    elem.closest('.help-block').remove();
                },
                rules: {
                    'register-username': {
                        required: true,
                        minlength: 3
                    },
                    'register-email': {
                        required: true,
                        email: true
                    },
                    'register-password': {
                        required: true,
                        minlength: 8,
                        pattern: new RegExp(/^(?=.*[a-zA-Z])(?=.*\d)(?=.*[!@#$%^&*()_+])[A-Za-z\d][A-Za-z\d!@#$%^&*()_+]{7,19}$/)
                    },
                    'register-password2': {
                        required: true,
                        equalTo: '#register-password'
                    },
                    'register-terms': {
                        required: true
                    }
                },
                messages: {
                    'register-username': {
                        required: 'Please enter a username',
                        minlength: 'Your username must consist of at least 3 characters'
                    },
                    'register-email': 'Please enter a valid email address',
                    'register-password': {
                        required: 'Please provide a password',
                        minlength: 'Your password must be at least 8 characters long',
                        pattern: 'At least one uppercase letter, one lowercase letter, one number and one special character:'
                    },
                    'register-password2': {
                        required: 'Please provide a password',
                        minlength: 'Your password must be at least 5 characters long',
                        equalTo: 'Please enter the same password as above'
                    },
                    'register-terms': 'You must agree to the service terms!'
                }
            });
        };

        initValidation();

        $scope.loadingTracker = promiseTracker();
        $scope.successMessage = function (message) {
            ActivityService.notify('success', message + ', you will be receive activation email shortly.');
            $scope.register = {
                name: '',
                password: '',
                confirmPassword: '',
                toc: '0',
            }
        }
        $scope.submitRegister = function (event) {
            jQuery('.js-validation-register').validate('validate')
            var hasErrors = jQuery('.js-validation-register').has('.has-error').length
            if (hasErrors == 0) {
                if ($scope.register.toc) {
                    if ($scope.password == $scope.confirmPassword) {
                        Debuger.info('action', 'Submit Register Fired');
                        $scope.loadingTracker.addPromise(
                            UserService.registerUser($scope.register.name, $scope.register.email, $scope.register.password)
                                .then(function (message) {
                                    if (reveralCode != '' || shortName != '') {
                                        UserService.setReferal($scope.register.email, reveralCode, shortName).then(function (a) {
                                            $scope.successMessage(message);
                                        }, function (a) {
                                            $scope.successMessage(message);
                                        })
                                    } else {
                                        $scope.successMessage(message);
                                    }
                                }, function (errorResponse) {
                                    if (reveralCode != '' || shortName != '') {
                                        UserService.setReferal($scope.register.email, reveralCode, shortName).then(function (a) {
                                            ActivityService.notify('warning', errorResponse + '.');
                                            Debuger.info('registerErrorMessage', errorResponse)
                                        }, function (a) {
                                            ActivityService.notify('warning', errorResponse + '.');
                                            Debuger.info('registerErrorMessage', errorResponse)
                                        })
                                    } else {
                                        ActivityService.notify('warning', errorResponse + '.');
                                        Debuger.info('registerErrorMessage', errorResponse)
                                    }

                                })
                        )
                    } else {
                        ActivityService.notify('warning', 'Your password did not match.')
                    }
                } else {
                    ActivityService.notify('warning', 'Please accept our Term of Condition.')
                }
            } else {
                ActivityService.notify('warning', '<strong>Validation</strong> There is errors.')
            }
        }
    })
    // Activation Layout Controller
    .controller('ActivationCtrl', function ($scope, $localStorage, $window, Debuger, UserService, $auth,
                                            ActivityService, $timeout, $location, activationCode, promiseTracker) {
        Debuger.info('Layout : ', 'Activation')

        Debuger.info('Activation Code : ', activationCode)

        $scope.loadingTracker = promiseTracker();

        $scope.success = false;
        $scope.error = false;
        $scope.expiredToken = false;
        $scope.loadingTracker.addPromise(
            UserService.activateUser(activationCode).then(function (response) {
                $scope.success = true;
            }, function (response) {
                if (response.indexOf('Expired token') !== -1) {
                    $scope.expiredToken = true;
                } else {
                    $scope.error = true;
                }

            })
        );

    })
    // Resend Email Layout Controller
    .controller('ResendCtrl', function ($scope, $localStorage, $window, Debuger, UserService, $auth, ActivityService, $timeout, $location, promiseTracker) {
        /*
         * Init Chart.js Chart, for more examples you can check out http://www.chartjs.org/docs
         */
        Debuger.info('Layout : ', 'Resend Email')

        var initValidation = function () {
            jQuery('.js-validation-resend').validate({
                ignore: [],
                errorClass: 'help-block animated fadeInDown',
                errorElement: 'div',
                errorPlacement: function (error, e) {
                    jQuery(e).parents('.form-group > div').append(error);
                },
                highlight: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error').addClass('has-error');
                    elem.closest('.help-block').remove();
                },
                success: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error');
                    elem.closest('.help-block').remove();
                },
                rules: {
                    'register-email': {
                        required: true,
                        email: true
                    }
                },
                messages: {
                    'register-email': 'Please enter a valid email address'
                }
            });
        };

        initValidation();

        $scope.email = '';
        $scope.loadingTracker = promiseTracker();
        $scope.submitResend = function (event) {
            jQuery('.js-validation-resend').validate('validate')
            var hasErrors = jQuery('.js-validation-resend').has('.has-error').length

            if (hasErrors == 0) {
                if ($scope.email != '') {
                    Debuger.info('event', 'Resend Fired!')
                    Debuger.info('email', $scope.email)
                    $scope.loadingTracker.addPromise(
                        UserService.resendEmail($scope.email)
                            .then(function (message) {
                                ActivityService.notify('success', message)
                            }, function (errorResponse) {
                                Debuger.info('resendErrorMessage', response)
                            })
                    );
                }
            } else {
                ActivityService.notify('warning', '<strong>Validation</strong> There is errors.')
            }
        }
    })

    // Remeber Password Layout Controller
    .controller('RememberPasswordCtrl', function ($scope, $localStorage, $window, Debuger, UserService, $auth,
                                                  ActivityService, $timeout, $location) {
        /*
         * Init Chart.js Chart, for more examples you can check out http://www.chartjs.org/docs
         */
        Debuger.info('Layout : ', 'Remember Password')

        var initValidation = function () {
            jQuery('.js-validation-remember').validate({
                ignore: [],
                errorClass: 'help-block animated fadeInDown',
                errorElement: 'div',
                errorPlacement: function (error, e) {
                    jQuery(e).parents('.form-group > div').append(error);
                },
                highlight: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error').addClass('has-error');
                    elem.closest('.help-block').remove();
                },
                success: function (e) {
                    var elem = jQuery(e);

                    elem.closest('.form-group').removeClass('has-error');
                    elem.closest('.help-block').remove();
                },
                rules: {
                    'register-email': {
                        required: true,
                        email: true
                    }
                },
                messages: {
                    'register-email': 'Please enter a valid email address'
                }
            });
        };

        initValidation();

        $scope.email = '';
        $scope.submitReset = function (event) {
            jQuery('.js-validation-remember').validate('validate')
            var hasErrors = jQuery('.js-validation-remember').has('.has-error').length
            if (hasErrors == 0) {
                if ($scope.email != '') {
                    Debuger.info('event', 'Remember Password Fired!')
                    Debuger.info('email', $scope.email)
                    UserService.rememberPassword($scope.email)
                        .then(function (message) {
                            ActivityService.notify('success', message)
                        }, function (errorResponse) {
                            Debuger.info('resendErrorMessage', response)
                        })
                }
            } else {
                ActivityService.notify('warning', '<strong>Validation</strong> There is errors.')
            }
        }
    })
    // Dashboard Content Controller
    .controller('DashboardCtrl', function ($scope, $rootScope, $localStorage, $window,
                                           UserService, CurrencyService, Debuger, tokenContract,
                                           promiseTracker) {
        /*
         * Init Chart.js Chart, for more examples you can check out http://www.chartjs.org/docs
         */
        CurrencyService.getPrice('ETH', 'ETH,BTC,USD,EUR').then(function (response) {
            $scope.currencyData = response;
            $scope.cursUSD = ($scope.currencyData.USD.USD * 0.8).toFixed(6);
            $scope.cursEUR = ($scope.currencyData.USD.EUR * 0.8).toFixed(6);
            $scope.cursBTC = ($scope.currencyData.USD.BTC * 0.8).toFixed(6);
            $scope.cursETH = ($scope.currencyData.USD.ETH * 0.8).toFixed(6);
        }, function (response) {

        })

        var Web3 = require('web3');
        var web3 = new Web3(wsBC);
        web3.setProvider(new web3.providers.HttpProvider(rpcBC));
        $scope.web3 = web3;
        $scope.tokenAddress = tokenAddress;
        $scope.tokenContractJSON = tokenContract;
        $scope.tokenContract = new $scope.web3.eth.Contract($scope.tokenContractJSON.abi, $scope.tokenAddress, {
            from: '0x06E11F1E94e054CB85dFE3010106226a27E44B88',
            gas: 2000000
        });
        $scope.loadingTotalSupply = promiseTracker();
        // $scope.loadingTotalSupply.addPromise(
        //     // $scope.tokenContract.methods.totalSupply().call({}, function (error, result) {
        //     //     console.log(error)
        //     //     console.log(result)
        //     // })
        // )

        UserService.getCurrentUser().then(function (response) {
            Debuger.info('getCurrentUser', response)
            $rootScope.userData = response;
            $scope.displayName = $rootScope.userData.name;

            UserService.getProfile().then(function (response) {
                $scope.profileData = response;
                if ($scope.profileData.firstname != '')
                    $scope.displayName = $scope.profileData.firstname + ' ' + $scope.profileData.lastname;
            }, function (response) {
                ActivityService.notify('warning', 'You not yet setting user profile.', '/profile')
            })

            UserService.getReferal().then(function (response) {
                Debuger.info('Referal : ', response);
                $scope.referalInformation = response;
            }, function (response) {
            })
        })

    })

    // Wallet Content Controller
    .controller('MainCtrl', function ($scope, $rootScope, $sessionStorage, $window, tokenContract, crowdsaleContract,
                                      $state, $auth, $location, UserService, $uibModal, Debuger, ActivityService) {
        Debuger.log('Controller', 'MainCtrl')

        var Web3 = require('web3');
        var web3 = new Web3(wsBC);
        web3.setProvider(new web3.providers.HttpProvider(rpcBC));

        UserService.getCurrentUser().then(function (response) {
            Debuger.info('getCurrentUser', response)
            $rootScope.userData = response;
        })
        Debuger.log('userData', $rootScope.userData)

        $scope.web3 = web3;
        $scope.crowdsaleContract = '';
        $scope.gasLimit = 0;
        $scope.gasPrice = 0;
        $scope.balanceWei = 0;
        $scope.balanceEther = 0;
        $scope.blockNumber = 0;

        // REDIRECTING WHEN NO accountAddress
        $scope.accountAddress = '';
        $scope.tokenContractJSON = tokenContract;
        $scope.crowdsaleContractJSON = crowdsaleContract;

        UserService.getProfile().then(function (response) {
            Debuger.info('profileData', $rootScope.profileData)
            $scope.openWallet()
        }, function (response) {
            ActivityService.notify('warning', 'You not yet setting user profile.', '/profile')
            $scope.openWallet()
        })

        $scope.openWallet = function () {
            UserService.getWallet().then(function (response) {
                if ($scope.accountAddress != response.a) {
                    $scope.accountAddress = response.a;
                    $scope.$broadcast('retrieveAccountAddress', {address: response.a, privatekey: response.p});
                }

            }, function (response) {
                // VIEW MODAL
                var modalInstance = $uibModal.open({
                    animation: true,
                    component: 'createWalletComponent',
                    resolve: {
                        userData: function () {
                            return $rootScope.userData;
                        },
                        profileData: function () {
                            return $rootScope.profileData;
                        }
                    }
                });

                $scope.passPhrase = '';
                modalInstance.result.then(function (value) {
                    $scope.passPhrase = value.passphrase;
                    $newAccount = web3.eth.accounts.create($scope.passPhrase);
                    $scope.$broadcast('retrieveAccountAddress', {
                        address: $newAccount.address,
                        privatekey: $newAccount.privateKey
                    });
                    UserService.setWallet($newAccount.address, $newAccount.privateKey).then(function (response) {
                        ActivityService.notify('success', 'Successfull open your wallet.')
                    }, function (response) {
                        ActivityService.notify('success', '<strong>Open Wallet</strong> We apologize for the inconvenience.')
                    })
                    Debuger.info('passphrase', $scope.passPhrase)
                }, function () {
                    Debuger.info('modal-component dismissed at: ' + new Date());
                });
                // END VIEW MODAL
            })
        }


        //Latest Block
        $scope.web3.eth.getBlock("latest", function (error, result) {
            Debuger.info('latest block', result)
            $scope.gasLimit = result.gasLimit;
        });
    })
    // Wallet Content Controller
    .controller('WalletCtrl', function ($scope, $rootScope, $sessionStorage, $window, $state,
                                        Debuger, $uibModal, UserService, ActivityService, ClaimService, CurrencyService,
                                        $timeout) {
        Debuger.info('Controller', 'WalletCtrl')
        /*
         * Init Chart.js Chart, for more examples you can check out http://www.chartjs.org/docs
         */

        UserService.getCurrentUser().then(function (response) {
            Debuger.info('getCurrentUser', response)
            $rootScope.userData = response;
            $scope.displayName = $rootScope.userData.name;

            UserService.getProfile().then(function (response) {
                $scope.profileData = response;
                if ($scope.profileData.firstname != '')
                    $scope.displayName = $scope.profileData.firstname + ' ' + $scope.profileData.lastname;
            }, function (response) {
                ActivityService.notify('warning', 'You not yet setting user profile.', '/profile')
            })
        })

        // REDIRECTING WHEN NO accountAddress
        $scope.$on('retrieveAccountAddress', function (event, data) {
            var Web3 = require('web3');
            var web3 = new Web3(wsBC);
            web3.setProvider(new web3.providers.HttpProvider(rpcBC));
            $scope.web3 = web3;

            $scope.accountAddress = data.address;
            $scope.accountPrivate = data.privatekey;

            $scope.tokenAddress = tokenAddress;
            $scope.crowdsaleAddress = crowdsaleAddress;

            $scope.tokenContract = new $scope.web3.eth.Contract($scope.tokenContractJSON.abi, $scope.tokenAddress, {
                from: $scope.accountAddress,
                gas: 2000000
            });
            $scope.crowdsaleContract = new $scope.web3.eth.Contract($scope.crowdsaleContractJSON.abi, $scope.crowdsaleAddress, {
                from: $scope.accountAddress,
                gas: 2000000
            });

            $scope.web3.eth.getBalance($scope.accountAddress, function (error, response) {
                    $scope.balanceWei = response;
                    $scope.balanceEther = $scope.web3.utils.fromWei($scope.balanceWei, 'ether');
            })

            $scope.blockNumber = $scope.web3.eth.blockNumber;
            $scope.crowdsaleContract.methods.usedReserveSupply().call()
                .then(console.log);
            console.log('crowdsaleContract', $scope.crowdsaleContract)
            console.log('tokenContract', $scope.tokenContract)
            $scope.tokenContract.methods.balanceOf($scope.accountAddress).call({from: $scope.accountAddress}, function (error, result) {
                console.log('balanceOf', result)
                $scope.$apply(function () {
                    $scope.balance = result;
                    $scope.balanceNumber = $scope.balance / Math.pow(10, 19);
                });
            });
            $scope.tokenContract.methods.totalSupply().call({from: $scope.accountAddress}, function (error, result) {
                console.log('totalSupply', result)
            })


            // $scope.gasPrice = $scope.web3.eth.gasPrice;
            // $scope.gasPriceHex = $scope.web3.utils.toHex($scope.gasPrice);
            // $scope.gasLimitHex = $scope.web3.utils.toHex(3000000);
            //
            // $scope.nonceval = $scope.web3.eth.getTransactionCount($scope.accountAddress);

            // $scope.crowdsaleContract.methods.sendTransaction({ from: $scope.accountAddress, value: $scope.web3.utils.toWei(0.01, "ether")})
            //     .on('transactionHash', function(hash){
            //         console.log('transactionHash',hash)
            //     })
            //     .on('confirmation', function(confirmationNumber, receipt){
            //         console.log('confirmation Number', confirmationNumber)
            //         console.log('confirmation Receipt', receipt)
            //     })
            //     .on('receipt', function(receipt){
            //         // receipt example
            //         console.log('receipt',receipt);
            //     })

            //     var fTx = {
            //         nonce: $scope.nonceval,
            //         gasPrice: $scope.gasPriceHex,
            //         gasLimit: $scope.gasLimitHex,
            //         data: bytecode,
            //         from: account1
            //     };
            //
            //     var txx = new Tx(fTx);
            //     txx.sign(key1);
            //
            //     var sTx =txx.serialize();
            //
            //
            //     web3.eth.sendRawTransaction('0x' + sTx.toString('hex'), (err, hash) => {
            //         if (err) { console.log(err); return; }
            //
            //         // Log the tx, you can explore status manually with eth.getTransaction()
            //         console.log('contract creation tx: ' + hash);
            // });

        });

        $scope.createWalletfromPrivateKey = function () {
            UserService.getProfile().then(function (response) {
                $scope.openWallet()
            }, function (response) {
                ActivityService.notify('warning', 'You not yet setting user profile.', '/profile')
                $scope.openWallet()
            })
        }
        $scope.openWallet = function () {
            // VIEW MODAL
            var modalInstance = $uibModal.open({
                animation: true,
                component: 'createWalletPrivateKeyComponent',
                resolve: {
                    userData: function () {
                        return $rootScope.userData;
                    },
                    profileData: function () {
                        return $rootScope.profileData;
                    }
                }
            });

            $scope.privatekey = '';
            modalInstance.result.then(function (value) {
                $scope.privatekey = value.privatekey;
                $newAccount = $scope.web3.eth.accounts.privateKeyToAccount($scope.privatekey);
                $scope.$broadcast('retrieveAccountAddress', {
                    address: $newAccount.address,
                    privatekey: $newAccount.privateKey
                });
                $scope.$emit('retrieveAccountAddress', {
                    address: $newAccount.address,
                    privatekey: $newAccount.privateKey
                });
                UserService.setWallet($newAccount.address, $newAccount.privateKey).then(function (response) {
                    ActivityService.notify('success', 'Successfull open your wallet.')
                }, function (response) {
                    ActivityService.notify('success', '<strong>Open Wallet</strong> We apologize for the inconvenience.')
                })
                Debuger.info('privatekey', $scope.privatekey)
            }, function () {
                Debuger.info('modal-component dismissed at: ' + new Date());
            });
            // END VIEW MODAL
        }
        $scope.claimNTC = function () {
            // VIEW MODAL
            $scope.claim = {
                currency: '',
                btcaddress: '',
                amount: '',
                txhash: '',
                rate: ''
            };
            UserService.getCurrentUser().then(function (response) {
                Debuger.info('getCurrentUser', response)
                $rootScope.userData = response;
                $scope.displayName = $rootScope.userData.name;

                UserService.getProfile().then(function (response) {
                    $scope.profileData = response;
                    if ($scope.profileData.firstname != '')
                        $scope.displayName = $scope.profileData.firstname + ' ' + $scope.profileData.lastname;

                    CurrencyService.getPrice('ETH', 'ETH,BTC,USD,EUR').then(function (response) {
                        $scope.currencyData = response;
                        var modalInstance = $uibModal.open({
                            animation: true,
                            component: 'claimNTCComponent',
                            resolve: {
                                userData: function () {
                                    return $rootScope.userData;
                                },
                                profileData: function () {
                                    return $rootScope.profileData;
                                },
                                currencyData: function () {
                                    return $scope.currencyData;
                                },
                                currency: function () {
                                    return [
                                        {symbol: 'BTC', name: 'Bitcoin'},
                                        {symbol: 'ETH', name: 'Ethereum'},
                                        {symbol: 'DASH', name: 'Dashcoin'},
                                    ]
                                }
                            }
                        });

                        modalInstance.result.then(function (value) {
                            $scope.claim = value.claim;
                            ClaimService.setClaim(
                                $scope.claim.btcaddress,
                                $scope.claim.amount,
                                $scope.claim.currency,
                                $scope.claim.txhash,
                                $scope.claim.rate
                            ).then(function (response) {
                                ActivityService.notify('success', '<strong>Claim NTC</strong> Thank you for your confirmation, we will process your transaction immediatelly.')
                                Debuger.info('Success Claim', response)
                            }, function (response) {
                                Debuger.info('Fail Claim', response)
                            })

                            Debuger.info('claim', $scope.claim)
                        }, function () {
                            Debuger.info('modal-component dismissed at: ' + new Date());
                        });
                    }, function (response) {

                    })
                }, function (response) {
                    ActivityService.notify('warning', 'You not yet setting user profile.', '/profile')
                })
            })



            // END VIEW MODAL
        }
        $scope.pendingTransactions = [];
        $scope.refresh = function () {
            $scope.web3.eth.getBlock(
                "pending",
                function (error, block) {
                    if (error) {
                        Debuger.log('error block', error)
                    } else {
                        $scope.$apply(function () {
                            $scope.pendingTransactions = block.transactions;
                        });
                    }
                });
        }
    })
    // Profile Controller
    .controller('ProfileCtrl', function ($scope, $rootScope, $sessionStorage, $window, $state, Debuger,
                                         UserService, ActivityService, promiseTracker) {
        Debuger.info('Controller : ', 'Profile')
        /*
         * Init Chart.js Chart, for more examples you can check out http://www.chartjs.org/docs
         */

        $scope.profile = {
            user_code: '',
            firstname: '',
            lastname: ''
        };

        $scope.loadingTrackerReferalCode = promiseTracker();
        var setReferalLink = function (referalCode) {
            $scope.referalLink = app_host + '#!/registration/' + referalCode
            $scope.referalLinkExample = app_host + '#!/registration/<token_code>'
        }

        UserService.getCurrentUser().then(function (response) {
            Debuger.info('getCurrentUser', response)
            $rootScope.userData = response;
            $scope.displayName = $rootScope.userData.name;
            $scope.shortLink = app_host + '#!/ref/' + $rootScope.userData.name;

            UserService.getProfile().then(function (response) {
                $scope.profileData = response;
                $scope.profile.firstname = response.firstname;
                $scope.profile.lastname = response.lastname;
                if ($scope.profileData.firstname != '')
                    $scope.displayName = $scope.profileData.firstname + ' ' + $scope.profileData.lastname;
            }, function (response) {
                ActivityService.notify('warning', 'You not yet setting user profile.', '/profile')
            })
        })

        $scope.loadingTrackerReferalCode.addPromise(
            UserService.getReferalCode().then(function (response) {
                $scope.referalCode = response.referal_code;
                setReferalLink($scope.referalCode)
            }, function (response) {
                $scope.loadingTrackerReferalCode.addPromise(
                    UserService.requestReferalCode().then(function (response) {
                        $scope.loadingTrackerReferalCode.addPromise(
                            UserService.getReferalCode().then(function (response) {
                                $scope.referalCode = response.referal_code
                                setReferalLink($scope.referalCode)
                            }, function (response) {
                            })
                        )
                    })
                )
            })
        )

        UserService.getReferal().then(function (response) {
            Debuger.info('Referal : ', response);
            UserService.getUser(response.referal_code);
        }, function (response) {

        })

        $scope.submitProfile = function (event) {
            UserService.setProfile($scope.profile.firstname, $scope.profile.lastname).then(function (response) {
                ActivityService.notify('success', 'Successfull save your profile.')
            }, function (response) {
                ActivityService.notify('warning', '<strong>Profile</strong> failed to save your profile, try again later.')
            })
        }


    })
    // Referal Controller
    .controller('ReferalCtrl', function ($scope, $rootScope, $sessionStorage, $window, $state, Debuger,
                                         UserService, ActivityService, promiseTracker) {
        Debuger.info('Controller : ', 'Profile')
        /*
         * Init Chart.js Chart, for more examples you can check out http://www.chartjs.org/docs
         */

        UserService.getCurrentUser().then(function (response) {
            $rootScope.userData = response;
            $scope.displayName = $rootScope.userData.name;
            $scope.shortLink = app_host + '#!/ref/' + $rootScope.userData.name;

            UserService.getProfile().then(function (response) {
                $scope.profileData = response;
                $scope.profile.firstname = response.firstname;
                $scope.profile.lastname = response.lastname;
                if ($scope.profileData.firstname != '')
                    $scope.displayName = $scope.profileData.firstname + ' ' + $scope.profileData.lastname;
            }, function (response) {
                ActivityService.notify('warning', 'You not yet setting user profile.', '/profile')
            })
        })

        $scope.loadingTrackerReferalCode = promiseTracker();
        var setReferalLink = function (referalCode) {
            $scope.referalLink = app_host + '#!/registration/' + referalCode
            $scope.referalLinkExample = app_host + '#!/registration/<token_code>'
        }

        $scope.loadingTrackerReferalCode.addPromise(
            UserService.getReferalCode().then(function (response) {
                $scope.referalCode = response.referal_code;
                setReferalLink($scope.referalCode)
            }, function (response) {
                $scope.loadingTrackerReferalCode.addPromise(
                    UserService.requestReferalCode().then(function (response) {
                        $scope.loadingTrackerReferalCode.addPromise(
                            UserService.getReferalCode().then(function (response) {
                                $scope.referalCode = response.referal_code
                                setReferalLink($scope.referalCode)
                            }, function (response) {
                            })
                        )
                    })
                )
            })
        )

        // Init Tree Views
        var initTreeViews = function () {
            // Set default example tree data for all Tree Views
            var treeData = [
                {
                    text: 'Bootstrap',
                    href: '#parent1',
                    tags: ['4'],
                    nodes: [
                        {
                            text: 'eLearning',
                            href: '#child1',
                            tags: ['2'],
                            nodes: [
                                {
                                    text: 'Code',
                                    href: '#grandchild1'
                                },
                                {
                                    text: 'Tutorials',
                                    href: '#grandchild2'
                                }
                            ]
                        },
                        {
                            text: 'Templates',
                            href: '#child2'
                        },
                        {
                            text: 'CSS',
                            href: '#child3',
                            tags: ['2'],
                            nodes: [
                                {
                                    text: 'Less',
                                    href: '#grandchild3'
                                },
                                {
                                    text: 'SaSS',
                                    href: '#grandchild4'
                                }
                            ]
                        }
                    ]
                },
                {
                    text: 'Design',
                    href: '#parent3'
                },
                {
                    text: 'Coding',
                    href: '#parent4'
                },
                {
                    text: 'Marketing',
                    href: '#parent5'
                }
            ];


        }
        $scope.loadingTrackerReferal = promiseTracker();
        $scope.referalInformation = {}

        var recursiveTree = function (data) {
            var treeData = []
            angular.forEach(data, function (value, key) {
                var item = {
                    name: value.name,
                    level: value.level,
                    firstname: value.firstname,
                    lastname: value.lastname,
                    commision: value.commision,
                    icon: "si si-user",
                };

                if (value.children.length > 0)
                    item.children = recursiveTree(value.children)

                treeData.push(item)
            })

            return treeData
        }
        $scope.upTreeData = [];
        $scope.downTreeData = [];
        $scope.col_defs_upline = [
            {
                field: "level",
                displayName: "Level",
                sortable : true,
                filterable : true,
                cellTemplate: "<span class=\"label label-primary\">{{ row.branch[col.field] }}</span>"
            },{
                field: "firstname",
                displayName: "Firstname",
            },{
                field: "lastname",
                displayName: "Lastname",
            }
        ];
        $scope.col_defs_downline = [
            {
                field: "level",
                displayName: "Level",
                sortable : true,
                filterable : true,
                cellTemplate: "<span class=\"label label-primary\">{{ row.branch[col.field] }}</span>"
            },{
                field: "firstname",
                displayName: "Firstname",
            },{
                field: "lastname",
                displayName: "Lastname",
            },{
                field: "commision",
                displayName: "Commision",
                sortable : true,
                filterable : true,
                cellTemplate: "<span class=\"label label-success\">{{ row.branch[col.field] }} NTC</span>"
            },
        ];
        $scope.showDetail = function(branch){
            UserService.getUser(branch.name).then(function (response) {
                Debuger.info('getCurrentUser', response)
                $rootScope.userData = response;
                $scope.displayName = $rootScope.userData.name;

                UserService.getProfile(branch.name).then(function (response) {
                    $scope.profileData = response;
                    if ($scope.profileData.firstname != '')
                        $scope.displayName = $scope.profileData.firstname + ' ' + $scope.profileData.lastname;

                    // VIEW MODAL
                    var modalInstance = $uibModal.open({
                        animation: true,
                        component: 'transactionComponent',
                        resolve: {
                            userData: function () {
                                return $rootScope.userData;
                            },
                            profileData: function () {
                                return $rootScope.profileData;
                            }
                        }
                    });

                    $scope.privatekey = '';
                    modalInstance.result.then(function (value) {
                        $scope.privatekey = value.privatekey;
                        $newAccount = $scope.web3.eth.accounts.privateKeyToAccount($scope.privatekey);
                        $scope.$broadcast('retrieveAccountAddress', {
                            address: $newAccount.address,
                            privatekey: $newAccount.privateKey
                        });
                        $scope.$emit('retrieveAccountAddress', {
                            address: $newAccount.address,
                            privatekey: $newAccount.privateKey
                        });
                        UserService.setWallet($newAccount.address, $newAccount.privateKey).then(function (response) {
                            ActivityService.notify('success', 'Successfull open your wallet.')
                        }, function (response) {
                            ActivityService.notify('success', '<strong>Open Wallet</strong> We apologize for the inconvenience.')
                        })
                        Debuger.info('privatekey', $scope.privatekey)
                    }, function () {
                        Debuger.info('modal-component dismissed at: ' + new Date());
                    });
                    // END VIEW MODAL
                })
            })


        }

        $scope.loadingTrackerReferal.addPromise(
            UserService.getReferal().then(function (response) {
                Debuger.info('Referal : ', response);
                $scope.referalInformation = response;


                $scope.upTreeData = recursiveTree(response.upline)
                $scope.downTreeData = recursiveTree(response.downline)
            }, function (response) {
            })
        )

        $scope.submitProfile = function (event) {
            UserService.setProfile($scope.profile.firstname, $scope.profile.lastname).then(function (response) {
                ActivityService.notify('success', 'Successfull save your profile.')
            }, function (response) {
                ActivityService.notify('warning', '<strong>Profile</strong> failed to save your profile, try again later.')
            })
        }


    })